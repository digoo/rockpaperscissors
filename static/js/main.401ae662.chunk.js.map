{"version":3,"sources":["assets/images/regular.jpg","assets/images/thebigbangtheory.jpg","styles/global.js","services/history.js","pages/Home/styles.js","pages/Home/index.js","pages/Game/styles.js","pages/Game/index.js","routes.js","App.js","index.js"],"names":["module","exports","createGlobalStyle","history","createBrowserHistory","Wrapper","styled","div","lighten","darken","schema","Yup","shape","player1Name","required","player2Name","Home","useState","player1","name1","bg1","player2","name2","bg2","bestOf","players","setPlayers","useEffect","getPlayers","JSON","parse","localStorage","getItem","flags","handleFlagP1Change","useCallback","event","target","value","handleFlagP2Change","handleNameP1Change","handleNameP2Change","bestOfs","handlBestOfChange","gameTypes","playerTypes","basicSymbols","customSymbols","game","playerType","play","gamesMode","setGamesMode","handleGameTypeChange","handlePlayerTypeChange","className","src","regular","alt","onSubmit","setItem","stringify","push","type","name","id","onChange","placeholder","map","flag","key","gameType","thebigbangtheory","Container","BestOf","PlayerSide","props","bg","symbol","Scorebox","Button","button","Game","score1","score2","scores","setScores","message","messages","setMessages","messageFinal","messages2","setMessages2","symbolp1","symbolp2","symbols","setSymbols","psymbolp1","psymbolp2","prevSymbols","setPrevSymbols","gsymbolp2","gameSymbols","setGameSymbols","modes","setModes","setCustomSymbols","setTimeout","storageSymbols","prevSym","sum","calculateWinner","document","onkeydown","keydown","ctrlKey","shiftKey","altKey","metaKey","repeat","code","Math","floor","random","length","resetGame","PlayerHand","console","log","onClick","Routes","exact","path","component","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.401ae662.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/regular.bdc69844.jpg\";","module.exports = __webpack_public_path__ + \"static/media/thebigbangtheory.909d7a21.jpg\";","import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n@import url('https://fonts.googleapis.com/css?family=Roboto:400,700&display=swap');\n\n* {\n  margin: 0;\n  padding: 0;\n  outline: 0;\n  box-sizing: border-box;\n  }\n\n  *:focus {\n    outline: 0;\n  }\n  html, body, #root {\n    height: 100%;\n  }\n\nbody {\n  height: 100%;\n  background: linear-gradient(-90deg, #7159c1, #ab59c1);\n  -webkit-font-smoothing: antialiased;\n}\n\nbody, input, button {\n  font: 14px Roboto, sans-serif;\n}\n\na {\n    text-decoration: none;\n  }\n\n  ul {\n    list-style: none;\n  }\n\nbutton {\n  cursor: pointer;\n}\n\n`;\n","import { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory();\n\nexport default history;\n","import styled from 'styled-components';\nimport { darken, lighten } from 'polished';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-evenly;\n\n  div {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    text-align: center;\n    /* border: 1px solid #eee; */\n    margin: 30px auto;\n\n    strong {\n      font-weight: bold;\n      font-size: 22px;\n      color: #fff;\n      text-align: center;\n      margin-bottom: 15px;\n    }\n\n    img {\n      width: 300px;\n      height: 300px;\n    }\n  }\n\n  form {\n    display: flex;\n    flex-direction: column;\n    width: 300px;\n    height: 500px;\n    align-items: center;\n    justify-content: center;\n    text-align: center;\n    border: 1px solid #eee;\n    margin: 30px auto;\n\n    p {\n      color: #fff;\n      font-weight: bold;\n      margin-top: 5px;\n    }\n\n    input {\n      background: rgba(0, 0, 0, 0.1);\n      border: 0;\n      border-radius: 4px;\n      height: 34px;\n      padding: 0 15px;\n      color: #fff;\n      margin: 0 0 5px;\n\n      &:hover {\n        background: ${lighten(0.09, 'rgba(0, 0, 0, 0.1)')};\n      }\n\n      &::placeholder {\n        color: rgba(255, 255, 255, 0.7);\n      }\n    }\n    select {\n      background: rgba(0, 0, 0, 0.1);\n      border: 0;\n      border-radius: 4px;\n      height: 24px;\n      padding: 0 5px;\n      color: #fff;\n      margin: 0 0 5px;\n\n      &:hover {\n        background: ${lighten(0.09, 'rgba(0, 0, 0, 0.1)')};\n      }\n    }\n    option {\n      color: #fff;\n      background: #7159c1;\n    }\n\n    button {\n      margin: 15px 0 0;\n      height: 34px;\n      width: 188px;\n      background: #7159c1;\n      font-weight: bold;\n      color: #fff;\n      border: 0;\n      border-radius: 4px;\n      font-size: 16px;\n      transition: background 0.2s;\n\n      &:hover {\n        background: ${darken(0.03, '#7159c1')};\n      }\n      &:active {\n        background: ${lighten(0.09, '#7159c1')};\n      }\n    }\n  }\n`;\n","import React, { useState, useCallback, useEffect } from 'react';\nimport * as Yup from 'yup';\nimport { Form, Input } from '@rocketseat/unform';\nimport history from '../../services/history';\n\nimport { Wrapper } from './styles';\nimport regular from '../../assets/images/regular.jpg';\nimport thebigbangtheory from '../../assets/images/thebigbangtheory.jpg';\n\nconst schema = Yup.object().shape({\n  player1Name: Yup.string().required('Player name is required.'),\n  player2Name: Yup.string().required('Player name is required.'),\n});\n\nexport default function Home() {\n  const [players, setPlayers] = useState({\n    player1: { name1: '', bg1: 'Red' },\n    player2: { name2: 'Blue', bg2: 'Blue' },\n    bestOf: 3,\n  });\n  // ComponentDidMount getting all data we have previous added\n  useEffect(() => {\n    const getPlayers = JSON.parse(localStorage.getItem('players'));\n\n    if (getPlayers) {\n      setPlayers(getPlayers);\n    }\n  }, []);\n  // Player colors\n  const [flags] = useState([\n    'Red',\n    'Blue',\n    'Orange',\n    'Green',\n    'Yellow',\n    'Pink',\n  ]);\n  const handleFlagP1Change = useCallback(\n    event => {\n      setPlayers({\n        ...players,\n        player1: { ...players.player1, bg1: event.target.value },\n      });\n    },\n    [players]\n  );\n  const handleFlagP2Change = useCallback(\n    event => {\n      setPlayers({\n        ...players,\n        player2: { ...players.player2, bg2: event.target.value },\n      });\n    },\n    [players]\n  );\n  // End of player colors\n\n  const handleNameP1Change = useCallback(\n    event => {\n      setPlayers({\n        ...players,\n        player1: { ...players.player1, name1: event.target.value },\n      });\n    },\n    [players]\n  );\n  const handleNameP2Change = useCallback(\n    event => {\n      setPlayers({\n        ...players,\n        player2: { ...players.player2, name2: event.target.value },\n      });\n    },\n    [players]\n  );\n  // End of player name\n  // Set BestOf\n  const [bestOfs] = useState([3, 5, 7, 9, 11, 13, 15]);\n  const handlBestOfChange = useCallback(\n    event => {\n      setPlayers({ ...players, bestOf: event.target.value });\n    },\n    [players]\n  );\n  // End of BestOf\n\n  // Game Mode\n  const [gameTypes] = useState(['Normal', 'TheBigBangTheory']);\n  const [playerTypes] = useState(['Player', 'Computer', 'AdvComputer']);\n  const [basicSymbols] = useState(['rock', 'paper', 'scissors']);\n  const [customSymbols] = useState([\n    'rock',\n    'paper',\n    'scissors',\n    'lizard',\n    'spock',\n  ]);\n  const [gamesMode, setGamesMode] = useState({\n    game: 'Normal',\n    playerType: 'Computer',\n    play: 'play',\n  });\n  const handleGameTypeChange = useCallback(\n    event => {\n      setGamesMode({ ...gamesMode, game: event.target.value });\n    },\n    [gamesMode]\n  );\n  const handlePlayerTypeChange = useCallback(\n    event => {\n      setGamesMode({ ...gamesMode, playerType: event.target.value });\n    },\n    [gamesMode]\n  );\n  // End of game mode\n\n  const handleSubmit = () => {\n    // event.preventDefault();\n\n    localStorage.setItem('modes', JSON.stringify(gamesMode));\n    if (gamesMode.game === 'Normal') {\n      localStorage.setItem('customSymbols', JSON.stringify(basicSymbols));\n    } else if (gamesMode.game === 'TheBigBangTheory') {\n      localStorage.setItem('customSymbols', JSON.stringify(customSymbols));\n    }\n    localStorage.setItem('players', JSON.stringify(players));\n    history.push('/rockpaperscissors/game');\n  };\n\n  return (\n    <>\n      <Wrapper className=\"all\">\n        <div>\n          <strong>Normal Game</strong>\n          <img src={regular} alt=\"Normal game\" />\n        </div>\n        <Form schema={schema} onSubmit={handleSubmit}>\n          <p>Name of the Player 1:</p>\n          <Input\n            type=\"text\"\n            name=\"player1Name\"\n            id=\"player1Name\"\n            onChange={handleNameP1Change}\n            value={players.player1.name1}\n            placeholder=\"Please add a player name\"\n          />\n          <p>Name of the Player 2:</p>\n          <Input\n            type=\"text\"\n            name=\"player2Name\"\n            id=\"player2Name\"\n            onChange={handleNameP2Change}\n            value={players.player2.name2}\n            placeholder=\"Please add a player name\"\n          />\n          <p>Color flag of the Player 1:</p>\n          <select value={players.player1.bg1} onChange={handleFlagP1Change}>\n            {flags.map(flag => (\n              <option key={flag} value={flag}>\n                {flag}\n              </option>\n            ))}\n          </select>\n          <p>Color flag of the Player 2:</p>\n          <select value={players.player2.bg2} onChange={handleFlagP2Change}>\n            {flags.map(flag => (\n              <option key={flag} value={flag}>\n                {flag}\n              </option>\n            ))}\n          </select>\n          <p>How long you want to play? Set the bestOf:</p>\n          <select value={players.bestOf} onChange={handlBestOfChange}>\n            {bestOfs.map(bestOf => (\n              <option key={bestOf} value={bestOf}>\n                {bestOf}\n              </option>\n            ))}\n          </select>\n          <p>What kind of game you want to play? (Instructions on edges)</p>\n          <select value={gamesMode.game} onChange={handleGameTypeChange}>\n            {gameTypes.map(gameType => (\n              <option key={gameType} value={gameType}>\n                {gameType}\n              </option>\n            ))}\n          </select>\n          <p>Would you like to play against who?</p>\n          <select\n            value={gamesMode.playerType}\n            onChange={handlePlayerTypeChange}\n          >\n            {playerTypes.map(playerType => (\n              <option key={playerType} value={playerType}>\n                {playerType}\n              </option>\n            ))}\n          </select>\n          <button type=\"submit\">Let&apos;s play!</button>\n        </Form>\n        <div>\n          <strong>The big bang theory Game</strong>\n          <img src={thebigbangtheory} alt=\"The big bang theory game\" />\n        </div>\n      </Wrapper>\n    </>\n  );\n}\n","import styled from 'styled-components';\nimport { darken } from 'polished';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  margin: 0 auto;\n  justify-content: space-evenly;\n\n  div.edges {\n    align-content: center;\n    justify-content: center;\n    /* border: 2px solid #333; */\n    margin-top: 90px;\n    height: 160px;\n    text-align: center;\n\n    strong {\n      font-size: 22px;\n      color: #fff;\n    }\n\n    p {\n      font-size: 16px;\n      color: #fff;\n    }\n  }\n`;\n\nexport const BestOf = styled.div`\n  display: flex;\n  width: 80px;\n  height: 20px;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  border: 1px solid #eee;\n  margin: 3px auto 0;\n  color: #fff;\n  font-weight: bold;\n\n  &:first-child {\n    margin-top: 16px;\n  }\n\n  & + & {\n    margin-bottom: 10px;\n    width: 130px;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-evenly;\n  width: 600px;\n  margin: 16px auto;\n\n  div.sides {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  div.message {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    width: 300px;\n    height: 20px;\n    margin-top: 20px;\n\n    p {\n      font-size: 16px;\n      font-weight: bold;\n      color: #fff;\n    }\n  }\n`;\n\nexport const PlayerSide = styled.div`\n  width: 190px;\n  height: 190px;\n  margin: 19px;\n  border-radius: 50%;\n  background-color: ${props => props.bg};\n  background-image: ${props =>\n    `url('./assets/images/symbol/${props.symbol}.png')`};\n  text-align: center;\n  border: 2px solid #ffe;\n  opacity: 1;\n  background-repeat: no-repeat;\n  background-position: center center;\n`;\n\nexport const Scorebox = styled.div`\n  width: 20px;\n  height: 20px;\n  border: 2px solid #ffe;\n  text-align: center;\n  color: #fff;\n  font-weight: bold;\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  width: 350px;\n  height: 40px;\n  margin-top: 20px;\n  justify-content: space-evenly;\n  align-items: center;\n  background: linear-gradient(-90deg, #7159c1, #ab59c1);\n  border: 1px solid #eee;\n  color: white;\n\n  &:hover {\n    background: ${darken(0.03, '#7159c1')};\n  }\n\n  &:active {\n    background: ${darken(0.09, '#7159c1')};\n  }\n`;\n","/* eslint-disable no-console */\nimport React, { useState, useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { sum } from 'mathjs';\nimport history from '../../services/history';\n\nimport {\n  Container,\n  Wrapper,\n  BestOf,\n  PlayerSide,\n  Scorebox,\n  Button,\n} from './styles';\n\nexport default function Game() {\n  // Begin of state area\n  const [players, setPlayers] = useState({\n    player1: { name1: '', bg1: '' },\n    player2: { name2: '', bg2: '' },\n    bestOf: 3,\n  });\n  useEffect(() => {\n    // Getting values from the localStorage\n    setPlayers(JSON.parse(localStorage.getItem('players')));\n  }, []);\n\n  const [scores, setScores] = useState({\n    score1: 0,\n    score2: 0,\n  });\n  useEffect(() => {\n    // Adding values to the localStorage\n    localStorage.setItem('scores', JSON.stringify(scores));\n  }, [scores]);\n\n  const [messages, setMessages] = useState({\n    message: '',\n  });\n  useEffect(() => {\n    // Adding values to the localStorage\n    localStorage.setItem('messages', JSON.stringify(messages));\n  }, [messages]);\n\n  const [messages2, setMessages2] = useState({\n    messageFinal: '',\n  });\n  useEffect(() => {\n    // Adding values to the localStorage\n    localStorage.setItem('messages2', JSON.stringify(messages2));\n  }, [messages2]);\n\n  // This state will be used to show the current symbol\n  const [symbols, setSymbols] = useState({\n    symbolp1: '',\n    symbolp2: '',\n  });\n  useEffect(() => {\n    // Adding values to the localStorage\n    localStorage.setItem('symbols', JSON.stringify(symbols));\n  }, [symbols]);\n\n  // This state is to show what was the previous symbol, to be used by advanced computer\n  const [prevSymbols, setPrevSymbols] = useState({\n    psymbolp1: '',\n    psymbolp2: '',\n  });\n  useEffect(() => {\n    // Adding values to the localStorage\n    localStorage.setItem('prevSymbols', JSON.stringify(prevSymbols));\n  }, [prevSymbols]);\n\n  // This state should be used to evaluate the score\n  const [gameSymbols, setGameSymbols] = useState({\n    gsymbolp2: '',\n  });\n  useEffect(() => {\n    // Adding values to the localStorage\n    localStorage.setItem('gameSymbols', JSON.stringify(gameSymbols));\n  }, [gameSymbols]);\n\n  // This state define the modes, the modes are self-described below\n  const [modes, setModes] = useState({\n    game: '',\n    playerType: '',\n    play: '',\n  });\n  useEffect(() => {\n    // Getting values from the localStorage\n    setModes(JSON.parse(localStorage.getItem('modes')));\n  }, []);\n\n  const [customSymbols, setCustomSymbols] = useState(['']);\n  useEffect(() => {\n    // Getting values from the localStorage\n    setCustomSymbols(JSON.parse(localStorage.getItem('customSymbols')));\n  }, []);\n\n  // End of State Area\n\n  // previous Symbols\n  const prevSym = () => {\n    const storageSymbols = JSON.parse(localStorage.getItem('symbols'));\n    const { symbolp1, symbolp2 } = storageSymbols;\n\n    if (symbolp1 === 'rock') {\n      setGameSymbols({ gsymbolp2: 'paper' });\n    } else if (symbolp1 === 'paper') {\n      setGameSymbols({ gsymbolp2: 'scissors' });\n    } else if (symbolp1 === 'scissors') {\n      setGameSymbols({ gsymbolp2: 'rock' });\n    } else if (symbolp1 === 'lizard') {\n      setGameSymbols({ gsymbolp2: 'scissors' });\n    } else if (symbolp1 === 'spock') {\n      setGameSymbols({ gsymbolp2: 'paper' });\n    }\n\n    setPrevSymbols({\n      psymbolp1: symbolp1,\n      psymbolp2: symbolp2,\n    });\n  };\n\n  // Pausing the round to avoid uncontrolled continuous play\n  useEffect(() => {\n    const resetRound = () => {\n      if (\n        messages.message !== '' &&\n        messages.message !== 'Hold on, unpausing the game in 2 seconds.' &&\n        messages2.messageFinal === ''\n      ) {\n        setModes({ ...modes, play: 'pause' });\n        setTimeout(() => {\n          setMessages({\n            ...messages,\n            message: `Hold on, unpausing the game in 2 seconds.`,\n          });\n        }, 2000);\n        setTimeout(() => {\n          prevSym();\n          setSymbols({\n            symbolp1: '',\n            symbolp2: '',\n          });\n          setMessages({ ...messages, message: '' });\n          setModes({ ...modes, play: 'play' });\n        }, 4000);\n      }\n      if (messages2.messageFinal !== '') {\n        setModes({ ...modes, play: 'end' });\n      }\n    };\n    resetRound();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [messages2, messages]);\n\n  // Set winner of the game\n  useEffect(() => {\n    const {\n      player1: { name1 },\n      player2: { name2 },\n      bestOf,\n    } = players;\n    const { score1, score2 } = scores;\n\n    if (\n      bestOf === score1 + score2 ||\n      score1 > bestOf / 2 ||\n      score2 > bestOf / 2\n    ) {\n      if (score1 > score2) {\n        setModes({ ...modes, play: 'end' });\n        setMessages2({\n          ...messages2,\n          messageFinal: `Game ended, player ${name1} win the game!`,\n        });\n      }\n      if (score2 > score1) {\n        setModes({ ...modes, play: 'end' });\n        setMessages2({\n          ...messages2,\n          messageFinal: `Game ended, player ${name2} win the game!`,\n        });\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [scores]);\n\n  // Calculating winner of the round\n  useEffect(() => {\n    const calculateWinner = () => {\n      // Loading values\n      const { symbolp1, symbolp2 } = symbols;\n\n      const {\n        player1: { name1 },\n        player2: { name2 },\n      } = players;\n      const { score1, score2 } = scores;\n\n      // Logic of winner begin here\n      if (symbolp1 === '' || symbolp2 === '') {\n        // do nothing\n      } else if (symbolp1 === symbolp2) {\n        setMessages({\n          ...messages,\n          message: 'Draw, no points added.',\n        });\n      } else if (\n        (symbolp1 === 'rock' && symbolp2 === 'scissors') ||\n        (symbolp1 === 'rock' && symbolp2 === 'lizard') ||\n        (symbolp1 === 'paper' && symbolp2 === 'rock') ||\n        (symbolp1 === 'paper' && symbolp2 === 'spock') ||\n        (symbolp1 === 'scissors' && symbolp2 === 'lizard') ||\n        (symbolp1 === 'scissors' && symbolp2 === 'paper') ||\n        (symbolp1 === 'lizard' && symbolp2 === 'paper') ||\n        (symbolp1 === 'lizard' && symbolp2 === 'spock') ||\n        (symbolp1 === 'spock' && symbolp2 === 'rock') ||\n        (symbolp1 === 'spock' && symbolp2 === 'scissors')\n      ) {\n        setScores({\n          ...scores,\n          score1: sum(score1, 1),\n        });\n        setMessages({\n          ...messages,\n          message: `Player ${name1} won this round.`,\n        });\n      } else {\n        setScores({\n          ...scores,\n          score2: sum(score2, 1),\n        });\n        setMessages({\n          ...messages,\n          message: `Player ${name2} won this round.`,\n        });\n      }\n    };\n    calculateWinner();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [symbols]);\n\n  document.onkeydown = keydown => {\n    const { play } = modes;\n    if (\n      // This Main IF is to avoid use of the following keys along with\n      // predefined keys\n      keydown.ctrlKey === false &&\n      keydown.shiftKey === false &&\n      keydown.altKey === false &&\n      keydown.metaKey === false &&\n      keydown.repeat === false &&\n      play === 'play'\n    ) {\n      if (modes.game === 'Normal' || modes.game === 'TheBigBangTheory') {\n        if (keydown.code === 'Digit1') {\n          if (modes.playerType === 'Player') {\n            setSymbols(() => ({\n              ...symbols,\n              symbolp1: customSymbols[keydown.key - 1],\n            }));\n          }\n          if (modes.playerType === 'Computer') {\n            setSymbols(() => ({\n              ...symbols,\n              symbolp1: customSymbols[keydown.key - 1],\n              symbolp2:\n                customSymbols[Math.floor(Math.random() * customSymbols.length)],\n            }));\n          }\n          if (modes.playerType === 'AdvComputer') {\n            if (gameSymbols.gsymbolp2) {\n              setSymbols(() => ({\n                ...symbols,\n                symbolp1: customSymbols[keydown.key - 1],\n                symbolp2: gameSymbols.gsymbolp2,\n              }));\n            } else {\n              setSymbols(() => ({\n                ...symbols,\n                symbolp1: customSymbols[keydown.key - 1],\n                symbolp2:\n                  customSymbols[\n                    Math.floor(Math.random() * customSymbols.length)\n                  ],\n              }));\n            }\n          }\n        }\n        if (keydown.code === 'Digit2') {\n          if (modes.playerType === 'Player') {\n            setSymbols(() => ({\n              ...symbols,\n              symbolp1: customSymbols[keydown.key - 1],\n            }));\n          }\n          if (modes.playerType === 'Computer') {\n            setSymbols(() => ({\n              ...symbols,\n              symbolp1: customSymbols[keydown.key - 1],\n              symbolp2:\n                customSymbols[Math.floor(Math.random() * customSymbols.length)],\n            }));\n          }\n          if (modes.playerType === 'AdvComputer') {\n            if (gameSymbols.gsymbolp2) {\n              setSymbols(() => ({\n                ...symbols,\n                symbolp1: customSymbols[keydown.key - 1],\n                symbolp2: gameSymbols.gsymbolp2,\n              }));\n            } else {\n              setSymbols(() => ({\n                ...symbols,\n                symbolp1: customSymbols[keydown.key - 1],\n                symbolp2:\n                  customSymbols[\n                    Math.floor(Math.random() * customSymbols.length)\n                  ],\n              }));\n            }\n          }\n        }\n        if (keydown.code === 'Digit3') {\n          if (modes.playerType === 'Player') {\n            setSymbols(() => ({\n              ...symbols,\n              symbolp1: customSymbols[keydown.key - 1],\n            }));\n          }\n          if (modes.playerType === 'Computer') {\n            setSymbols(() => ({\n              ...symbols,\n              symbolp1: customSymbols[keydown.key - 1],\n              symbolp2:\n                customSymbols[Math.floor(Math.random() * customSymbols.length)],\n            }));\n          }\n          if (modes.playerType === 'AdvComputer') {\n            if (gameSymbols.gsymbolp2) {\n              setSymbols(() => ({\n                ...symbols,\n                symbolp1: customSymbols[keydown.key - 1],\n                symbolp2: gameSymbols.gsymbolp2,\n              }));\n            } else {\n              setSymbols(() => ({\n                ...symbols,\n                symbolp1: customSymbols[keydown.key - 1],\n                symbolp2:\n                  customSymbols[\n                    Math.floor(Math.random() * customSymbols.length)\n                  ],\n              }));\n            }\n          }\n        }\n      }\n      if (modes.game === 'TheBigBangTheory') {\n        if (keydown.code === 'Digit4') {\n          if (modes.playerType === 'Player') {\n            setSymbols(() => ({\n              ...symbols,\n              symbolp1: customSymbols[keydown.key - 1],\n            }));\n          }\n          if (modes.playerType === 'Computer') {\n            setSymbols(() => ({\n              ...symbols,\n              symbolp1: customSymbols[keydown.key - 1],\n              symbolp2:\n                customSymbols[Math.floor(Math.random() * customSymbols.length)],\n            }));\n          }\n          if (modes.playerType === 'AdvComputer') {\n            if (gameSymbols.gsymbolp2) {\n              setSymbols(() => ({\n                ...symbols,\n                symbolp1: customSymbols[keydown.key - 1],\n                symbolp2: gameSymbols.gsymbolp2,\n              }));\n            } else {\n              setSymbols(() => ({\n                ...symbols,\n                symbolp1: customSymbols[keydown.key - 1],\n                symbolp2:\n                  customSymbols[\n                    Math.floor(Math.random() * customSymbols.length)\n                  ],\n              }));\n            }\n          }\n        }\n        if (keydown.code === 'Digit5') {\n          if (modes.playerType === 'Player') {\n            setSymbols(() => ({\n              ...symbols,\n              symbolp1: customSymbols[keydown.key - 1],\n            }));\n          }\n          if (modes.playerType === 'Computer') {\n            setSymbols(() => ({\n              ...symbols,\n              symbolp1: customSymbols[keydown.key - 1],\n              symbolp2:\n                customSymbols[Math.floor(Math.random() * customSymbols.length)],\n            }));\n          }\n          if (modes.playerType === 'AdvComputer') {\n            if (gameSymbols.gsymbolp2) {\n              setSymbols(() => ({\n                ...symbols,\n                symbolp1: customSymbols[keydown.key - 1],\n                symbolp2: gameSymbols.gsymbolp2,\n              }));\n            } else {\n              setSymbols(() => ({\n                ...symbols,\n                symbolp1: customSymbols[keydown.key - 1],\n                symbolp2:\n                  customSymbols[\n                    Math.floor(Math.random() * customSymbols.length)\n                  ],\n              }));\n            }\n          }\n        }\n      }\n\n      // second player code\n      // separated to avoid confusion\n      if (\n        (modes.game === 'Normal' || modes.game === 'TheBigBangTheory') &&\n        modes.playerType === 'Player'\n      ) {\n        if (keydown.code === 'Numpad1') {\n          setSymbols(() => ({\n            ...symbols,\n            symbolp2: customSymbols[0],\n          }));\n        }\n        if (keydown.code === 'Numpad2') {\n          setSymbols(() => ({\n            ...symbols,\n            symbolp2: customSymbols[1],\n          }));\n        }\n        if (keydown.code === 'Numpad3') {\n          setSymbols(() => ({\n            ...symbols,\n            symbolp2: customSymbols[2],\n          }));\n        }\n      }\n\n      if (modes.game === 'TheBigBangTheory' && modes.playerType === 'Player') {\n        if (keydown.code === 'Numpad4') {\n          setSymbols(() => ({\n            ...symbols,\n            symbolp2: customSymbols[3],\n          }));\n        }\n        if (keydown.code === 'Numpad5') {\n          setSymbols(() => ({\n            ...symbols,\n            symbolp2: customSymbols[4],\n          }));\n        }\n      }\n    }\n  };\n\n  const resetGame = useCallback(() => {\n    // nested object literal\n    setSymbols(() => ({\n      symbolp1: '',\n      symbolp2: '',\n    }));\n    setPrevSymbols({\n      psymbolp1: '',\n      psymbolp2: '',\n    });\n    setGameSymbols({ gsymbolp2: '' });\n    setModes({ ...modes, play: 'play' });\n    setMessages({\n      message: '',\n    });\n    setMessages2({\n      messageFinal: '',\n    });\n    setScores({\n      score1: 0,\n      score2: 0,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [modes]);\n\n  const PlayerHand = ({ bg, symbol }) => {\n    return <PlayerSide className=\"player\" bg={bg} symbol={symbol} />;\n  };\n\n  PlayerHand.propTypes = {\n    bg: PropTypes.string.isRequired,\n    symbol: PropTypes.string.isRequired,\n  };\n\n  const handleBack = () => {\n    history.push('/rockpaperscissors');\n  };\n\n  return (\n    <>\n      {console.log(symbols, players, messages, modes)}\n      <Container>\n        <div className=\"edges\">\n          <strong>Player One Commands:</strong>\n          <p>1 - rock</p>\n          <p>2 - paper</p>\n          <p>3 - scissors</p>\n          <p>(Below works only on The big bang theory game)</p>\n          <p>4 - lizard</p>\n          <p>5 - spock</p>\n        </div>\n        <div>\n          <BestOf>BestOf: {players.bestOf}</BestOf>\n          <BestOf>{modes.game}</BestOf>\n          <Wrapper className=\"App\">\n            <div className=\"sides\">\n              <PlayerHand\n                bg={players.player1.bg1}\n                symbol={\n                  symbols.symbolp1 ? symbols.symbolp1 : prevSymbols.psymbolp1\n                }\n              />\n              <Scorebox>{scores.score1}</Scorebox>\n            </div>\n            <div className=\"sides\">\n              <PlayerHand\n                bg={players.player2.bg2}\n                symbol={\n                  symbols.symbolp2 ? symbols.symbolp2 : prevSymbols.psymbolp2\n                }\n              />\n              <Scorebox>{scores.score2}</Scorebox>\n            </div>\n            <div className=\"message\">\n              <p>\n                {messages2.messageFinal\n                  ? messages2.messageFinal\n                  : messages.message}\n              </p>\n            </div>\n            <Button onClick={resetGame}>Reset Game</Button>\n            <Button onClick={handleBack}>Back to Welcome Page</Button>\n          </Wrapper>\n        </div>\n        <div className=\"edges\">\n          <strong>Player Two Commands:</strong>\n          <p>Numpad 1 - rock</p>\n          <p>Numpad 2 - paper</p>\n          <p>Numpad 3 - scissors</p>\n          <p>(Below works only on The big bang theory game)</p>\n          <p>Numpad 4 - lizard</p>\n          <p>Numpad 5 - spock</p>\n        </div>\n      </Container>\n    </>\n  );\n}\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Home from './pages/Home';\nimport Game from './pages/Game';\n\nexport default function Routes() {\n  return (\n    <Switch>\n      <Route exact path=\"/rockpaperscissors\" component={Home} />\n      <Route path=\"/rockpaperscissors/game\" component={Game} />\n      <Route path=\"/\" component={() => <div>404 Page not Found</div>} />\n    </Switch>\n  );\n}\n","import React from 'react';\nimport { Router } from 'react-router-dom';\n\nimport GlobalStyle from './styles/global';\nimport history from './services/history';\n\nimport Routes from './routes';\n\nfunction App() {\n  return (\n    <Router history={history}>\n      <Routes />\n      <GlobalStyle />\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}